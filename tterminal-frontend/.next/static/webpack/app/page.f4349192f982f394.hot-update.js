"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/trading/useChartInteractions.ts":
/*!***********************************************!*\
  !*** ./hooks/trading/useChartInteractions.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChartInteractions: () => (/* binding */ useChartInteractions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_trading_calculations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/trading/calculations */ \"(app-pages-browser)/./utils/trading/calculations.ts\");\n/**\n * Chart Interactions Hook\n * Manages mouse events, drawing tools, and chart interactions with ultra-fast axis-specific zoom\n */ \n\nconst useChartInteractions = (param)=>{\n    let { canvasRef, candleData, drawingMode, drawingTools, selectedDrawingIndex, viewportState, dragState, setHoveredCandle, setMousePosition, setDrawingTools, setSelectedDrawingIndex, setDrawingMode, setSelectedDrawingTool, setDragState, setViewportState } = param;\n    /**\n   * Detect if mouse is over Y-axis (price axis) or X-axis (time axis)\n   */ const getAxisZone = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChartInteractions.useCallback[getAxisZone]\": (x, y, canvas)=>{\n            const rect = canvas.getBoundingClientRect();\n            const priceAxisWidth = 80 // Right side price axis (w-20 = 80px)\n            ;\n            const timeAxisHeight = 32 // Bottom time axis (h-8 = 32px)\n            ;\n            const chartWidth = rect.width - priceAxisWidth;\n            const chartHeight = rect.height - timeAxisHeight;\n            // Check if in price axis zone (right edge)\n            if (x >= chartWidth && x <= rect.width) {\n                return 'price-axis';\n            }\n            // Check if in time axis zone (bottom edge)  \n            if (y >= chartHeight && y <= rect.height) {\n                return 'time-axis';\n            }\n            // Check if near price axis edge (for drag detection)\n            if (x >= chartWidth - 15 && x <= chartWidth + 15) {\n                return 'price-axis-edge';\n            }\n            // Check if near time axis edge (for drag detection)\n            if (y >= chartHeight - 15 && y <= chartHeight + 15) {\n                return 'time-axis-edge';\n            }\n            return 'chart';\n        }\n    }[\"useChartInteractions.useCallback[getAxisZone]\"], []);\n    /**\n   * Handle mouse movement for crosshair, candle hover, and axis detection\n   */ const handleMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChartInteractions.useCallback[handleMouseMove]\": (event)=>{\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const rect = canvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            // Handle active axis dragging only\n            if (dragState.isDraggingPrice) {\n                const deltaY = y - dragState.dragStart.y;\n                const sensitivity = 0.002 // Ultra-sensitive for professional trading\n                ;\n                const zoomFactor = 1 + deltaY * sensitivity;\n                setViewportState({\n                    \"useChartInteractions.useCallback[handleMouseMove]\": (prev)=>({\n                            ...prev,\n                            priceZoom: Math.max(0.05, Math.min(50, prev.priceZoom * zoomFactor))\n                        })\n                }[\"useChartInteractions.useCallback[handleMouseMove]\"]);\n                // Update drag start for continuous movement\n                setDragState({\n                    \"useChartInteractions.useCallback[handleMouseMove]\": (prev)=>({\n                            ...prev,\n                            dragStart: {\n                                x,\n                                y\n                            }\n                        })\n                }[\"useChartInteractions.useCallback[handleMouseMove]\"]);\n                return;\n            }\n            if (dragState.isDraggingTime) {\n                const deltaX = x - dragState.dragStart.x;\n                const sensitivity = 0.002 // Ultra-sensitive for professional trading\n                ;\n                const zoomFactor = 1 + deltaX * sensitivity;\n                setViewportState({\n                    \"useChartInteractions.useCallback[handleMouseMove]\": (prev)=>({\n                            ...prev,\n                            timeZoom: Math.max(0.05, Math.min(50, prev.timeZoom * zoomFactor))\n                        })\n                }[\"useChartInteractions.useCallback[handleMouseMove]\"]);\n                // Update drag start for continuous movement\n                setDragState({\n                    \"useChartInteractions.useCallback[handleMouseMove]\": (prev)=>({\n                            ...prev,\n                            dragStart: {\n                                x,\n                                y\n                            }\n                        })\n                }[\"useChartInteractions.useCallback[handleMouseMove]\"]);\n                return;\n            }\n            // Don't interfere with existing chart dragging - let trading terminal handle it\n            if (dragState.isDraggingChart) {\n                return;\n            }\n            // Detect axis zones and update cursor\n            const axisZone = getAxisZone(x, y, canvas);\n            if (axisZone === 'price-axis' || axisZone === 'price-axis-edge') {\n                canvas.style.cursor = 'ns-resize';\n            } else if (axisZone === 'time-axis' || axisZone === 'time-axis-edge') {\n                canvas.style.cursor = 'ew-resize';\n            } else {\n                canvas.style.cursor = 'move';\n            }\n            // Calculate which candle is being hovered\n            const candleWidth = 8 * viewportState.timeZoom;\n            const spacing = 12 * viewportState.timeZoom;\n            const startX = 50;\n            const candleIndex = Math.floor((x - startX + viewportState.timeOffset) / spacing);\n            if (candleIndex >= 0 && candleIndex < candleData.length) {\n                setHoveredCandle(candleData[candleIndex]);\n            }\n            // Calculate price at mouse position\n            const chartHeight = canvas.offsetHeight - 100;\n            const priceRange = (113000 - 107000) / viewportState.priceZoom;\n            const price = 113000 - (y - 50 + viewportState.priceOffset) / chartHeight * priceRange;\n            setMousePosition({\n                x,\n                y,\n                price\n            });\n        }\n    }[\"useChartInteractions.useCallback[handleMouseMove]\"], [\n        viewportState,\n        candleData,\n        dragState,\n        setHoveredCandle,\n        setMousePosition,\n        setViewportState,\n        setDragState,\n        getAxisZone\n    ]);\n    /**\n   * Handle mouse down events for axis dragging only\n   */ const handleCanvasMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (e)=>{\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const rect = canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            // Check for axis dragging first - this takes priority\n            const axisZone = getAxisZone(x, y, canvas);\n            if (axisZone === 'price-axis' || axisZone === 'price-axis-edge') {\n                setDragState({\n                    \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (prev)=>({\n                            ...prev,\n                            isDraggingPrice: true,\n                            dragStart: {\n                                x,\n                                y\n                            }\n                        })\n                }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n            if (axisZone === 'time-axis' || axisZone === 'time-axis-edge') {\n                setDragState({\n                    \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (prev)=>({\n                            ...prev,\n                            isDraggingTime: true,\n                            dragStart: {\n                                x,\n                                y\n                            }\n                        })\n                }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n            // For chart area, let the existing drawing and chart drag system handle it\n            const { timeIndex, price } = (0,_utils_trading_calculations__WEBPACK_IMPORTED_MODULE_1__.screenToChartCoordinates)(x, y, canvas, viewportState.timeZoom, viewportState.priceZoom, viewportState.timeOffset, viewportState.priceOffset);\n            // Find clicked drawing\n            let clickedDrawingIndex = -1;\n            let closestDistance = Infinity;\n            drawingTools.forEach({\n                \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (tool, index)=>{\n                    if ((0,_utils_trading_calculations__WEBPACK_IMPORTED_MODULE_1__.isPointInDrawing)(timeIndex, price, tool)) {\n                        if (tool.type === \"Horizontal Ray\") {\n                            const distance = Math.abs(price - tool.price1);\n                            if (distance < closestDistance) {\n                                closestDistance = distance;\n                                clickedDrawingIndex = index;\n                            }\n                        } else {\n                            clickedDrawingIndex = index;\n                        }\n                    }\n                }\n            }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n            // Right-click to remove drawings\n            if (e.button === 2) {\n                e.preventDefault();\n                if (clickedDrawingIndex !== -1) {\n                    setDrawingTools({\n                        \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (prev)=>{\n                            const updatedTools = [\n                                ...prev\n                            ];\n                            updatedTools.splice(clickedDrawingIndex, 1);\n                            return updatedTools;\n                        }\n                    }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n                    setSelectedDrawingIndex(null);\n                }\n                return;\n            }\n            // Left-click to select drawing or start new drawing\n            if (clickedDrawingIndex !== -1) {\n                setSelectedDrawingIndex(clickedDrawingIndex);\n                return;\n            } else {\n                setSelectedDrawingIndex(null);\n            }\n            // Handle drawing mode\n            if (drawingMode === \"Horizontal Ray\") {\n                setDrawingTools({\n                    \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (prev)=>[\n                            ...prev,\n                            {\n                                type: \"Horizontal Ray\",\n                                price1: price,\n                                time1: 0,\n                                price2: price,\n                                time2: candleData.length,\n                                color: \"#ffff00\",\n                                lineWidth: 1\n                            }\n                        ]\n                }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n                setDrawingMode(null);\n                setSelectedDrawingTool(null);\n            } else if (drawingMode === \"Rectangle\") {\n                setDrawingTools({\n                    \"useChartInteractions.useCallback[handleCanvasMouseDown]\": (prev)=>[\n                            ...prev,\n                            {\n                                type: \"Rectangle\",\n                                price1: price,\n                                time1: timeIndex,\n                                price2: price,\n                                time2: timeIndex,\n                                color: \"#ffff00\",\n                                lineWidth: 1\n                            }\n                        ]\n                }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"]);\n            }\n        // Let the trading terminal handle chart panning - don't set isDraggingChart here\n        }\n    }[\"useChartInteractions.useCallback[handleCanvasMouseDown]\"], [\n        canvasRef,\n        viewportState,\n        drawingTools,\n        drawingMode,\n        candleData,\n        setDrawingTools,\n        setSelectedDrawingIndex,\n        setDrawingMode,\n        setSelectedDrawingTool,\n        setDragState,\n        getAxisZone\n    ]);\n    /**\n   * Handle mouse up events to stop axis dragging\n   */ const handleAxisDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChartInteractions.useCallback[handleAxisDragEnd]\": ()=>{\n            setDragState({\n                \"useChartInteractions.useCallback[handleAxisDragEnd]\": (prev)=>({\n                        ...prev,\n                        isDraggingPrice: false,\n                        isDraggingTime: false,\n                        isDraggingChart: false,\n                        isDraggingOrderbook: false,\n                        isDraggingCvd: false,\n                        isDraggingLiquidations: false\n                    })\n            }[\"useChartInteractions.useCallback[handleAxisDragEnd]\"]);\n        }\n    }[\"useChartInteractions.useCallback[handleAxisDragEnd]\"], [\n        setDragState\n    ]);\n    /**\n   * Handle keyboard shortcuts for drawing management\n   */ (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useChartInteractions.useEffect\": ()=>{\n            const handleKeyDown = {\n                \"useChartInteractions.useEffect.handleKeyDown\": (event)=>{\n                    if (event.key === 'Delete' || event.key === 'Backspace') {\n                        if (selectedDrawingIndex !== null) {\n                            setDrawingTools({\n                                \"useChartInteractions.useEffect.handleKeyDown\": (prev)=>{\n                                    const updatedTools = [\n                                        ...prev\n                                    ];\n                                    updatedTools.splice(selectedDrawingIndex, 1);\n                                    return updatedTools;\n                                }\n                            }[\"useChartInteractions.useEffect.handleKeyDown\"]);\n                            setSelectedDrawingIndex(null);\n                        }\n                    }\n                    if (event.key === 'Escape') {\n                        setSelectedDrawingIndex(null);\n                        setDrawingMode(null);\n                        setSelectedDrawingTool(null);\n                        // Stop any dragging\n                        setDragState({\n                            \"useChartInteractions.useEffect.handleKeyDown\": (prev)=>({\n                                    ...prev,\n                                    isDraggingPrice: false,\n                                    isDraggingTime: false,\n                                    isDraggingChart: false,\n                                    isDraggingOrderbook: false,\n                                    isDraggingCvd: false,\n                                    isDraggingLiquidations: false\n                                })\n                        }[\"useChartInteractions.useEffect.handleKeyDown\"]);\n                    }\n                }\n            }[\"useChartInteractions.useEffect.handleKeyDown\"];\n            document.addEventListener('keydown', handleKeyDown);\n            return ({\n                \"useChartInteractions.useEffect\": ()=>{\n                    document.removeEventListener('keydown', handleKeyDown);\n                }\n            })[\"useChartInteractions.useEffect\"];\n        }\n    }[\"useChartInteractions.useEffect\"], [\n        selectedDrawingIndex,\n        setDrawingTools,\n        setSelectedDrawingIndex,\n        setDrawingMode,\n        setSelectedDrawingTool,\n        setDragState\n    ]);\n    /**\n   * Handle wheel events for ultra-fast zooming with axis detection\n   */ const handleWheel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useChartInteractions.useCallback[handleWheel]\": (e)=>{\n            e.preventDefault();\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const rect = canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            // Detect which axis we're hovering over\n            const axisZone = getAxisZone(x, y, canvas);\n            // Ultra-aggressive zoom factors for lightning-fast response\n            const wheelSensitivity = Math.abs(e.deltaY) / 50 // Increased sensitivity\n            ;\n            const baseZoomFactor = e.deltaY > 0 ? 0.8 : 1.25 // More aggressive base zoom\n            ;\n            const dynamicZoomFactor = e.deltaY > 0 ? Math.max(0.3, 1 - wheelSensitivity * 0.4) // Ultra-fast zoom out\n             : Math.min(3.0, 1 + wheelSensitivity * 0.5) // Ultra-fast zoom in\n            ;\n            // Axis-specific zooming\n            if (axisZone === 'price-axis' || axisZone === 'price-axis-edge' || e.ctrlKey || e.metaKey) {\n                // Price zoom (vertical) - ultra responsive\n                setViewportState({\n                    \"useChartInteractions.useCallback[handleWheel]\": (prev)=>({\n                            ...prev,\n                            priceZoom: Math.max(0.05, Math.min(50, prev.priceZoom * dynamicZoomFactor))\n                        })\n                }[\"useChartInteractions.useCallback[handleWheel]\"]);\n            } else if (axisZone === 'time-axis' || axisZone === 'time-axis-edge') {\n                // Time zoom (horizontal) - ultra responsive  \n                setViewportState({\n                    \"useChartInteractions.useCallback[handleWheel]\": (prev)=>({\n                            ...prev,\n                            timeZoom: Math.max(0.05, Math.min(50, prev.timeZoom * dynamicZoomFactor))\n                        })\n                }[\"useChartInteractions.useCallback[handleWheel]\"]);\n            } else {\n                // Default behavior - time zoom when no modifier\n                setViewportState({\n                    \"useChartInteractions.useCallback[handleWheel]\": (prev)=>({\n                            ...prev,\n                            timeZoom: Math.max(0.05, Math.min(50, prev.timeZoom * dynamicZoomFactor))\n                        })\n                }[\"useChartInteractions.useCallback[handleWheel]\"]);\n            }\n        }\n    }[\"useChartInteractions.useCallback[handleWheel]\"], [\n        setViewportState,\n        getAxisZone\n    ]);\n    return {\n        handleMouseMove,\n        handleCanvasMouseDown,\n        handleAxisDragEnd,\n        handleWheel\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/trading/useChartInteractions.ts\n"));

/***/ })

});